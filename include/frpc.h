/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package frp_lib/cmd/libfrpc */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>
#include <stdint.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#if defined(_MSC_VER)
    #define FRP_LIB_API __declspec(dllexport) // Microsoft
#elif defined(__GNUC__)
    #define FRP_LIB_API __attribute__((visibility("default"))) // GCC
#else
    #define FRP_LIB_API // Most compilers export all the symbols by default. We hope for the best here.
    #pragma warning Unknown dynamic link import/export semantics.
#endif

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "externFrp.go"

 
#line 1 "cgo-generated-wrapper"

#line 3 "frp.go"


typedef void (*LogListener) (const char* log);
typedef void (*FrpcClosedCallback)(const char* msg);
typedef void (*ProxyFailedCallback)();

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
#if INTPTR_MAX == INT64_MAX
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
#elif INTPTR_MAX == INT32_MAX
typedef GoInt32 GoInt;
typedef GoUint32 GoUint;
#else
#error Unknown pointer size or missing size macros!
#endif
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#  if _MSVC_LANG <= 201402L
#    include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#  else
#    include <complex>
typedef std::complex<float> GoComplex64;
typedef std::complex<double> GoComplex128;
#  endif
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif
/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
#if INTPTR_MAX == INT64_MAX
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];
#elif INTPTR_MAX == INT32_MAX
typedef char _check_for_32_bit_pointer_matching_GoInt[sizeof(void*)==32/8 ? 1:-1];
#else
#error Unknown pointer size or missing size macros!
#endif

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern FRP_LIB_API int RunFrpc(char* cfgFilePath);
extern FRP_LIB_API int ReloadFrpc();
extern FRP_LIB_API int StopFrpc();
extern FRP_LIB_API GoUint8 IsFrpcRunning();
extern FRP_LIB_API GoString Version();
extern FRP_LIB_API void SetReConnectByCount(GoUint8 reConnectByCount);
extern FRP_LIB_API void setLogListener(LogListener l);
extern FRP_LIB_API void setFrpcClosedCallback(FrpcClosedCallback l);
extern FRP_LIB_API void setProxyFailedCallback(ProxyFailedCallback l);

#ifdef __cplusplus
}
#endif
